/**
  * Общий заголовочный файл для клиента и сервера.
  *
  * Взаимодействие процессов через именованный канал, задание:
  * организующую взаимодействие двух процессов через именованный программный канал
  * (формулировка одного фильтра задана, второй фильтр необходимо придумать);
  *
  * 1-й фильтр разбивает текст на страницы по 24 строки и нумерует их
  * (вставляет в начало каждой страницы строку PAGE N, где N - номер страницы)
  * (Сервер - server)
  *
  * 2-й фильтр удаляет пробелы с начала строки.
  * (Клиент - client)
  *
  *
  * Компиляция программы сервера:
  * $ gcc -o server server.c
  *
  * Компиляция программы клиента:
  * $ gcc -o client client.c
  *
  * или:
  * $ make
  *
  * Проверка работы программы (клиент и сервер должны быть в одной папке):
  *
  * 1. СНАЧАЛА необходимо запустить сервер:
  *    $ cat файл | ./server
  * 2. ТОЛЬКО ПОТОМ запустить клиент:
  *    $ ./client
  *
  * Сервер запускается один раз, клиент может быть запущен несколько раз.
  *
  * файл - любой не пустой текстовый файл
  */

/*
 * Структура сообщения, которое может быть передано по общему каналу.
 */
typedef struct {
    // должно быть записано имя файла, который является приватным каналом
    // имя файла должно оканчиваться на символ конца строки '\0'
    char file_name[128];
} message;

// путь к файлу общего канала связи
#define PUBLIC "/tmp/public"
